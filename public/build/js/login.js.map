{"version":3,"sources":["auth.service.js","exception.service.js","login.controller.js","login.app.js"],"names":[],"mappingsjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"login.js","sourcesContent":["/*\r\n * Angular Service for authentication\r\n *\r\n * @params $http, $location, ExceptionService\r\n *\r\n * @returns none\r\n */\r\n\r\nAuthService.$inject = ['$http', '$location', 'ExceptionService', '$mdToast'];\r\n\r\nfunction AuthService($http, $location, ExceptionService, $mdToast) {\r\n\r\n    var self = this;\r\n\r\n    /****  Private Variables  ****/\r\n    var user = null;\r\n\r\n    /****  Initializations  ****/\r\n    authCheck();\r\n\r\n    /****  Public Functions  ****/\r\n\r\n    /*\r\n     * Logs in the user\r\n     *\r\n     * @params email (string|required), pwd (string|required), remember (bool|required), redirect (string|optional)\r\n     *\r\n     * @returns $http promise\r\n     */\r\n    self.login = function (email, pwd, remember, redirect) {\r\n        return $http.post('/loginAttempt', {\r\n                email: email,\r\n                password: pwd,\r\n                remember: remember\r\n            })\r\n            .then(function (response) {\r\n                if(response.data.success){\r\n                    if(redirect){\r\n                        window.location.assign(redirect);\r\n                    }\r\n                    user = response.data.user;\r\n                    return user;\r\n                }\r\n                else{\r\n                    $mdToast.showSimple('Email/Password combo not found');\r\n                    return false;\r\n                }\r\n            }, function (error) {\r\n                ExceptionService.errorResponse(error);\r\n                return error;\r\n            })\r\n    };\r\n\r\n    self.logout = function () {\r\n        $location.url('/logout');\r\n    };\r\n\r\n    self.register = function () {\r\n        //TODO fill out  \r\n    };\r\n\r\n    self.inviteNewUser = function () {\r\n        //TODO fill out  \r\n    };\r\n\r\n    self.getUser = function () {\r\n        return user;\r\n    };\r\n\r\n    self.isLoggedIn = function () {\r\n        return user !== null;\r\n    };\r\n    \r\n    self.sendResetEmail = function (email) {\r\n        return $http.post('/sendResetEmail', {\r\n            email: email\r\n        });\r\n    };\r\n    \r\n    self.getEmailRegex = function () {\r\n        return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    };\r\n    \r\n    self.getAllUsers = function () {\r\n        return $http.get('/getAllUsers').then(function (response) {\r\n            if(response.data.success){\r\n                return response.data.users;\r\n            }\r\n        });\r\n    };\r\n\r\n    /****  Private Functions  ****/\r\n\r\n    function authCheck() {\r\n        return $http.post('/authCheck')\r\n            .then(function (response) {\r\n                if(response.data.success){\r\n                    user = response.data.user;\r\n                }\r\n                return response;\r\n            }, function (error) {\r\n                ExceptionService.errorResponse(error);\r\n                return error;\r\n            });\r\n    }\r\n\r\n}","/*\r\n * Angular service for exception handling and reporting\r\n *\r\n * @params $log, $http, $mdDialog, $mdToast\r\n *\r\n * @returns none\r\n */\r\n\r\nExceptionService.$inject = ['$log', '$http', '$mdDialog', '$mdToast'];\r\n\r\nfunction ExceptionService($log, $http, $mdDialog, $mdToast) {\r\n\r\n    var self = this;\r\n\r\n    /****  Private Variables  ****/\r\n    var env = 'production';\r\n    var modes = {\r\n        local: {\r\n            verbose: true,\r\n            consoleLog: true,\r\n            remoteLog: false,\r\n            alert: true,\r\n            errorModal: true\r\n        },\r\n        staging: {\r\n            verbose: false,\r\n            consoleLog: true,\r\n            remoteLog: true,\r\n            alert: false,\r\n            errorModal: true\r\n        },\r\n        production: {\r\n            verbose: false,\r\n            consoleLog: false,\r\n            remoteLog: true,\r\n            alert: false,\r\n            errorModal: false\r\n        }\r\n    };\r\n\r\n    /****  Public Variables  ****/\r\n\r\n\r\n    /****  Initializations  ****/\r\n    $http.get('/getEnv')\r\n        .then(function (response) {\r\n            env = response.data.env;\r\n        }, function (error) {\r\n            errorResponse(error);\r\n        });\r\n\r\n\r\n    /****  Public Functions  ****/\r\n    self.logException = logException;\r\n    self.errorResponse = errorResponse;\r\n\r\n    /****  Private Functions  ****/\r\n\r\n    /*\r\n     * All errors/exceptions go through here\r\n     *\r\n     * @params location (string|required), description (string|required), data (array|optional), user (object|optional)\r\n     *\r\n     * @returns bool success\r\n     */\r\n    function logException (location, description, data, user) {\r\n\r\n        if(data === undefined){\r\n            data = [];\r\n        }\r\n        else if(!angular.isArray(data)){\r\n            data = [data];\r\n        }\r\n\r\n        if(user === undefined){\r\n            user = 'No user associated';\r\n        }\r\n\r\n        var ts = (new Date()).toISOString();\r\n\r\n        if(modes[env].verbose){\r\n            $log.error('New error created on ' + ts);\r\n        }\r\n\r\n        if(modes[env].consoleLog){\r\n            $log.error(location, description, data, user);\r\n        }\r\n\r\n        if(modes[env].alert){\r\n            toastr.error(description, location);\r\n        }\r\n\r\n        if(modes[env].remoteLog){\r\n            $http.post('/logException', {\r\n                location: location,\r\n                description: description,\r\n                data: data,\r\n                user: user\r\n            })\r\n        }\r\n    }\r\n\r\n    /*\r\n     * All http response errors go through this\r\n     *\r\n     * @params response (object|required)\r\n     *\r\n     * @returns bool success\r\n     */\r\n    function errorResponse (response) {\r\n        $log.error('error response', response);\r\n        if(modes[env].errorModal){\r\n            if(angular.isString(response.data)){\r\n                showDebugInfo(response.data);\r\n            }\r\n            else if(angular.isObject(response.data)){\r\n                var toastString = 'Error: ';\r\n                angular.forEach(response.data, function (value, key) {\r\n                    if(angular.isArray(value)){\r\n                        for (var i = 0; i < value.length; i++) {\r\n                            toastString += value[i] + ' | ';\r\n                        }\r\n                    }\r\n                });\r\n                $mdToast.showSimple(toastString);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Renders a dialog on the screen with debug details\r\n    *\r\n    * @params error html string\r\n    *\r\n    * @returns $mdDialog promise\r\n    */\r\n    function showDebugInfo (errorHtml) {\r\n        return $mdDialog.show({\r\n            parent: angular.element(document.body),\r\n            template: errorHtml,\r\n            clickOutsideToClose: true,\r\n            fullscreen: true\r\n        });\r\n    }\r\n\r\n}","/*\r\n* Angular Controller for the login page\r\n*\r\n* @params $scope, AuthService\r\n*\r\n* @returns none\r\n*/\r\n\r\nLoginController.$inject = ['$scope', '$mdDialog', 'AuthService'];\r\n\r\nfunction LoginController ($scope, $mdDialog, AuthService) {\r\n    \r\n    $scope.remember = false;\r\n    $scope.forgotPwd = false;\r\n    $scope.emailRegex = AuthService.getEmailRegex();\r\n    \r\n    $scope.login = function (loginForm) {\r\n        if(loginForm.$valid){\r\n            if($scope.forgotPwd){\r\n                AuthService.sendResetEmail($scope.email).then(function (response) {\r\n                    if(response.data.success){\r\n                        var alert = $mdDialog.alert({\r\n                            title: 'Check your inbox',\r\n                            textContent: 'If ' + $scope.email + ' exists in our system then you will get a password reset email sent to you',\r\n                            ok: 'Got It!'\r\n                        });\r\n                        $mdDialog.show(alert);\r\n                    }\r\n                }, function (error) {\r\n                    console.log('response error', error);\r\n                });\r\n            }\r\n            else {\r\n                AuthService.login($scope.email, $scope.password, $scope.remember, '/dashboard');\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n* Bringing login page together\r\n*\r\n* @params LoginController\r\n*\r\n* @returns none\r\n*/\r\nvar loginApp = angular.module('LoginApp', ['ngMaterial', 'ngMessages'])\r\n    .service('AuthService', AuthService)\r\n    .service('ExceptionService', ExceptionService)\r\n    .controller('LoginController', LoginController);"],"sourceRoot":"/source/"}