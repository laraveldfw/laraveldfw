{"version":3,"sources":["auth.service.js","exception.service.js","login.controller.js","login.app.js"],"names":[],"mappingstjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"login.js","sourcesContent":["/*\n * Angular Service for authentication\n *\n * @params $http, $location, ExceptionService\n *\n * @returns none\n */\n\nAuthService.$inject = ['$http', '$location', 'ExceptionService'];\n\nfunction AuthService($http, $location, ExceptionService) {\n\n    var self = this;\n\n    /****  Private Variables  ****/\n    var user = null;\n\n    /****  Initializations  ****/\n    authCheck();\n\n    /****  Public Functions  ****/\n\n    /*\n     * Logs in the user\n     *\n     * @params email (string|required), pwd (string|required), remember (bool|required), redirect (string|optional)\n     *\n     * @returns $http promise\n     */\n    self.login = function (email, pwd, remember, redirect) {\n        return $http.post('/loginAttempt', {\n                email: email,\n                password: pwd,\n                remember: remember\n            })\n            .then(function (response) {\n                if(response.data.success){\n                    if(redirect){\n                        window.location.assign(redirect);\n                    }\n                    user = response.data.user;\n                    return user;\n                }\n            }, function (error) {\n                ExceptionService.errorResponse(error);\n                return error;\n            })\n    };\n\n    self.logout = function () {\n        $location.url('/logout');\n    };\n\n    self.register = function () {\n        //TODO fill out  \n    };\n\n    self.inviteNewUser = function () {\n        //TODO fill out  \n    };\n\n    self.getUser = function () {\n        return user;\n    };\n\n    self.isLoggedIn = function () {\n        return user !== null;\n    };\n    \n    self.sendResetEmail = function (email) {\n        return $http.post('/sendResetEmail', {\n            email: email\n        });\n    };\n    \n    self.getEmailRegex = function () {\n        return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    };\n    \n    self.getAllUsers = function () {\n        return $http.get('/getAllUsers').then(function (response) {\n            if(response.data.success){\n                return response.data.users;\n            }\n        });\n    };\n\n    /****  Private Functions  ****/\n\n    function authCheck() {\n        return $http.post('/authCheck')\n            .then(function (response) {\n                if(response.data.success){\n                    user = response.data.user;\n                }\n                return response;\n            }, function (error) {\n                ExceptionService.errorResponse(error);\n                return error;\n            });\n    }\n\n}","/*\n * Angular service for exception handling and reporting\n *\n * @params none\n *\n * @returns none\n */\n\nExceptionService.$inject = ['$log', '$http'];\n\nfunction ExceptionService($log, $http) {\n\n    var self = this;\n\n    /****  Private Variables  ****/\n    var env = 'production';\n    var modes = {\n        local: {\n            verbose: true,\n            consoleLog: true,\n            remoteLog: false,\n            alert: true,\n            errorModal: true\n        },\n        staging: {\n            verbose: false,\n            consoleLog: true,\n            remoteLog: true,\n            alert: false,\n            errorModal: true\n        },\n        production: {\n            verbose: false,\n            consoleLog: false,\n            remoteLog: true,\n            alert: false,\n            errorModal: false\n        }\n    };\n\n    /****  Public Variables  ****/\n\n\n    /****  Initializations  ****/\n    $http.get('/getEnv')\n        .then(function (response) {\n            env = response.data.env;\n        }, function (error) {\n            errorResponse(error);\n        });\n\n\n    /****  Public Functions  ****/\n    self.logException = logException;\n    self.errorResponse = errorResponse;\n\n    /****  Private Functions  ****/\n\n    /*\n     * All errors/exceptions go through here\n     *\n     * @params location (string|required), description (string|required), data (array|optional), user (object|optional)\n     *\n     * @returns bool success\n     */\n    function logException (location, description, data, user) {\n\n        if(data === undefined){\n            data = [];\n        }\n        else if(!angular.isArray(data)){\n            data = [data];\n        }\n\n        if(user === undefined){\n            user = 'No user associated';\n        }\n\n        var ts = (new Date()).toISOString();\n\n        if(modes[env].verbose){\n            $log.error('New error created on ' + ts);\n        }\n\n        if(modes[env].consoleLog){\n            $log.error(location, description, data, user);\n        }\n\n        if(modes[env].alert){\n            toastr.error(description, location);\n        }\n\n        if(modes[env].remoteLog){\n            $http.post('/logException', {\n                location: location,\n                description: description,\n                data: data,\n                user: user\n            })\n        }\n    }\n\n    /*\n     * All http response errors go through this\n     *\n     * @params response (object|required)\n     *\n     * @returns bool success\n     */\n    function errorResponse (response) {\n        $log.error('error response', response);\n    }\n\n}","/*\n* Angular Controller for the login page\n*\n* @params $scope, AuthService\n*\n* @returns none\n*/\n\nLoginController.$inject = ['$scope', '$mdDialog', 'AuthService'];\n\nfunction LoginController ($scope, $mdDialog, AuthService) {\n    \n    $scope.remember = false;\n    $scope.forgotPwd = false;\n    $scope.emailRegex = AuthService.getEmailRegex();\n    \n    $scope.login = function (loginForm) {\n        if(loginForm.$valid){\n            if($scope.forgotPwd){\n                AuthService.sendResetEmail($scope.email).then(function (response) {\n                    if(response.data.success){\n                        var alert = $mdDialog.alert({\n                            title: 'Check your inbox',\n                            textContent: 'If ' + $scope.email + ' exists in our system then you will get a password reset email sent to you',\n                            ok: 'Got It!'\n                        });\n                        $mdDialog.show(alert);\n                    }\n                }, function (error) {\n                    console.log('response error', error);\n                });\n            }\n            else {\n                AuthService.login($scope.email, $scope.password, $scope.remember, '/dashboard');\n            }\n        }\n    }\n}","/*\n* Bringing login page together\n*\n* @params LoginController\n*\n* @returns none\n*/\nvar loginApp = angular.module('LoginApp', ['ngMaterial', 'ngMessages'])\n    .service('AuthService', AuthService)\n    .service('ExceptionService', ExceptionService)\n    .controller('LoginController', LoginController);"],"sourceRoot":"/source/"}